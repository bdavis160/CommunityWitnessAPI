/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0/userguide/building_java_projects.html
 */

plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
	// First party libraries
	implementation project(':org-communitywitness-common')
	
	// Third party libraries
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'com.kosprov.jargon2:jargon2-api:1.1.1'
    runtimeOnly 'com.kosprov.jargon2:jargon2-native-ri-backend:1.1.1'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.0.0'
    implementation 'org.glassfish.grizzly:grizzly-http-server:3.0.0'
    implementation 'org.glassfish.jersey.core:jersey-server:3.0.2'
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:3.0.2'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.0.2'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:3.0.2'
    implementation 'org.postgresql:postgresql:42.2.5'
    
    // For tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application {
    mainClass = 'org.communitywitness.api.Server'
}


tasks.named('test') {
    useJUnitPlatform()
}


tasks.register('ensureInstallDir') {
	group = 'Installation'
	description = "Makes installDir if it doesn't exist"
	doLast {
		mkdir installDir
	}
}

tasks.register('ensureServiceInstallDir') {
	group = 'Installation'
	description = "Makes serviceInstallDir if it doesn't exist"
	doLast {
		mkdir serviceInstallDir
	}
}

tasks.register('ensureLauncherInstallDir') {
	group = 'Installation'
	description = "Makes launcherInstallDir if it doesn't exist"
	doLast {
		mkdir launcherInstallDir
	}
}

tasks.register('installApplicationFiles', Copy) {
	group = 'Installation'
	description = 'Copies the files needed to run the API to installDir'
	dependsOn installDist, ensureInstallDir
	from "${buildDir}/install/${project.name}"
	into installDir
}

tasks.register('installService', Copy) {
	group = 'Installation'
	description = 'Copies the systemd service file to serviceInstallDir and modifies it to point to the correct location'
	dependsOn ensureServiceInstallDir
	from 'CommunityWitnessAPI.service'
	into serviceInstallDir
	expand('launcherInstallDir': launcherInstallDir, 'file': project.name, 'BASE_URI': '$BASE_URI')
}

tasks.register('installApplication') {
	group = 'Installation'
	description = 'Symlinks the launching script into launcherInstallDir'
	dependsOn installApplicationFiles, ensureLauncherInstallDir
	doLast {
		ant.symlink(resource: "${installDir}/bin/${project.name}", link: "${launcherInstallDir}/${project.name}")
	}
}

tasks.register('installPackage') {
	group = 'Installation'
	description = 'Install the whole software package, by calling on both installApplication and installService'
	dependsOn installApplication, installService
	doFirst {
		println("Installing application in ${installDir}, service file in ${serviceInstallDir}, ")
		println("and linking launcher in ${launcherInstallDir}.")
		println("Please ensure you have permission to modify those directories, for example by running this with sudo")
	}
}