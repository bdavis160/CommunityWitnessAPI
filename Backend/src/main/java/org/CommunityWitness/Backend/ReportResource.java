package org.CommunityWitness.Backend;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

// TODO: implement user authentication for all of these calls
// TODO: decide if we want to change the url/naming convention
// TODO: add error handling for things like non-existent database entries
@Path("/reports")
@Produces(MediaType.APPLICATION_JSON)
public class ReportResource {
	/**
	 * Sends a report from the database to a client.
	 * 
	 * @param reportId - the id of the report to send, which will be encoded in the request URL. 
	 * For example doing a GET on "ourApiUrl.com/reports/123" would send the report with id 123.
	 * @return the report with the given id.
	 */
	@GET
	@Path("/{reportId}")
	public Report getReport(@PathParam("reportId") int reportId) throws SQLException {
		return new Report(reportId);
	}
	
	/**
	 * Sends a list containing all the reports filed by the given witness.
	 * 
	 * @param witnessId
	 * @return a list of reports
	 */
	@GET
	@Path("/byWitness/{witnessId}")
	public List<Report> getWitnessReports(@PathParam("witnessId") int witnessId) {
		// TODO: lookup all the reports matching the given witnessID and gather them in a list
		return new ArrayList<Report>();
	}
	
	/**
	 * Creates a new report from report sent from a client.
	 * Note that the id the client sets for the report will be incorrect,
	 * as the proper id's are generated by the database.
	 * 
	 * @param newReport - the report the client sent.
	 * @return the actual id of the newly created report.
	 */
	@POST
	@Path("/create")
	@Consumes(MediaType.APPLICATION_JSON)
	public int createReport(Report newReport) {
		// TODO: save new report to database here and give it a proper id
		return newReport.id;
	}
	
	/**
	 * Updates a reports status to what the client specifies.
	 * TODO: determine a better return type for this, probably some sort of http response code.
	 * 
	 * @param reportId - the id of the report to update
	 * @param status - the new status of the report
	 */
	@POST
	@Path("/{reportId}/updateStatus")
	@Consumes(MediaType.APPLICATION_JSON)
	public void updateReportStatus(@PathParam("reportId") int reportId, boolean status) throws SQLException {
		Report toUpdate = new Report(reportId);
		toUpdate.setResolved(status);
	}
	
	/**
	 * Adds an investigators comment to a report.
	 * TODO: again determine a better return type.
	 * 
	 * @param reportId - the id of the report to comment on
	 * @param comment - the text of the comment sent by the client
	 */
	@POST
	@Path("/{reportId}/addComment")
	@Consumes(MediaType.APPLICATION_JSON)
	public void addCommentToReport(@PathParam("reportId") int reportId, String comment) {
		//Report toCommentOn = new Report(reportId);
		// TODO: write comment about report to database
	}
}
